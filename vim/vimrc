" .vimrc  by Kristof Rozgonyi @2024

" Automatic installation of vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : expand('~/.vim')
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" PLUGINS --------------------------------------------------------------------
" Plugin code goes here.

" --- Usage
" Install packages via: :PlugInstall (in vim)
" Uninstall packages via: :PlugClean (in vim after removing the package from
" this file)

" Begin the plugin section
call plug#begin('~/.vim/plugged')

" --- Installed packages

" --- Color scheme
Plug 'morhetz/gruvbox'

" --- PYTHON ---
" --- Python syntax highlights
Plug 'sheerun/vim-polyglot'

" --- Python autocompletion and useful tools
Plug 'davidhalter/jedi-vim'
" Disable jedi-vim's default shortcuts before call plug#end()
let g:jedi#use_shortcuts = 0

" --- SQL ---
" --- SQL syntax highlights
Plug 'lifepillar/pgsql.vim'
let g:sql_type_default = 'pgsql'

" --- SQL autocomplete
Plug 'vim-scripts/SQLComplete.vim'

" --- JavaScript ---
Plug 'dense-analysis/ale'

" --- Install supertab
Plug 'ervandew/supertab'

" --- Code block indentation
Plug 'nathanaelkane/vim-indent-guides'
" enabling by default and configuration
let indent_guides_enable_on_vim_startup = 1
let indent_guides_start_level = 2
let indent_guides_guide_size = 1

" --- Add the vim-gitgutter plugin
Plug 'airblade/vim-gitgutter'

" --- tmux navigation for panes
Plug 'christoomey/vim-tmux-navigator'

" --- fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" --- Add language server support
" coc.nvim for LSP support
"Plug 'neoclide/coc.nvim', {'branch': 'release'}

" MARKDOWN preview support
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" Create tags for files on-the-fly for easier navigation
Plug 'majutsushi/tagbar'

" End the plugin section
call plug#end()
" ----------------------------------------------------------------------------
"
" basic settings
set encoding=utf-8
scriptencoding utf-8
set fileencoding=utf-8 " File encoding
set showmode

" Set autosaving when changing files
set autowriteall

" --- Save buffers on exiting vim and reload them with a <leader>L
"  shortcut only -> so when I have multiple vim instances open, they
"  do not contain the same files opened. This is to prevent having
"  multiple edits on the same file.
"
"  When having multiple vim sessions open, each of them overwrites
"  the vim session file when closed. So only the *lastly* closed
"  instance will be saved to the session file
"
"  To close the current session without saving, use <leader>W
"
"  The macro saves the vim session into a file:
"  ~/.vim/sessions/default.vim

" Store the directory where vim was started
let g:vim_startup_directory = getcwd()

" Directory to store sessions (create it if it doesn't exist)
if !isdirectory(expand('~/.vim/sessions'))
    call mkdir(expand('~/.vim/sessions'), "p")
endif

" Automatically save the session on Vim exit
autocmd VimLeave * mksession! ~/.vim/sessions/default.vim

" If a default session file exists, load it when Vim starts
" autocmd VimEnter * if filereadable(expand('~/.vim/sessions/default.vim')) | execute 'source ~/.vim/sessions/default.vim' | endif

"  --- Set mapleader and some global copy options

" Set leader key to space
let mapleader = "\<Space>"

" Clipboard support for WSL (win32yank.exe file is needed !)
if system('uname -r') =~ "microsoft"
  " Auto-copy any yank operation to Windows clipboard
  augroup WSLYank
    autocmd!
    autocmd TextYankPost * if v:event.operator ==# 'y' | call system('win32yank.exe -i --crlf', @") | endif
  augroup END
  
  " Simplified mappings - the autocmd will handle Windows clipboard for yanking
  nmap <leader>y "+y
  vmap <leader>y "+y
  
  " For pasting from Windows clipboard, we need explicit commands
  nmap <leader>p :let @"=system('win32yank.exe -o --lf')<CR>p
  vmap <leader>p :let @"=system('win32yank.exe -o --lf')<CR>p
else
  " Non-WSL systems - use normal clipboard

  " Map leader + y to yank to the system clipboard in normal mode
  nmap <leader>y "+y
  " Map leader + y to yank to the system clipboard in visual mode
  vmap <leader>y "+y
  " Map leader + p to paste from the system clipboard
  nmap <leader>p "+p
  vmap <leader>p "+p
endif

" Shortcut to load the last session buffers session
" nnoremap <leader>L :execute 'source ' . $HOME . '/.vim/sessions/default.vim'<CR>

" Function to restore session but override working directory
function! RestoreSession()
    if filereadable(expand('~/.vim/sessions/default.vim'))
        source ~/.vim/sessions/default.vim
        " Override the session's working directory with startup directory
        execute 'cd ' . g:vim_startup_directory
        " Update FZF to use the new working directory
        let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
    endif
endfunction

" Map to your restore shortcut
nnoremap <leader>L :call RestoreSession()<CR>

" Function to close all buffers and do not overwrite the default session file
function! CloseAllBuffersNoSession()
  " Write all changes first
  wall
  " Delete all buffers without triggering autocmd
  noautocmd bufdo bdelete

  " Quit Vim without triggering autocmd
  noautocmd qa
endfunction

" Map <leader>W to close all buffers and exit without overwriting the session
nnoremap <silent> <leader>W :call CloseAllBuffersNoSession()<CR>

" --- overwrite some movement keys to fit my screen better
nnoremap <silent> J 5<C-e>  " Scroll down 10 lines
nnoremap <silent> K 5<C-y>  " Scroll up 10 lines

" --- Set up automatic tagbar and movement
" Enable autoclose
let g:tagbar_autoclose = 1
" open and autojump to tagbar
" nnoremap <silent> <leader>t :TagbarToggle<CR>:wincmd p<CR>
nnoremap <silent> <leader>t :TagbarToggle<CR>

" --- set indentation removal
" Remove indentation with Shift-Tab
nnoremap <S-Tab> <<
vnoremap <S-Tab> <gv
inoremap <S-Tab> <C-o><<

" --- Configure jedi behaviour
let g:jedi#popup_select_first = 0
let jedi#show_call_signatures = 0
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#use_tabs = 1

" Disable tabs as I only use buffers
" set tabpagemax=0

" Unmap default Shift-K from jedi-vim
augroup JediVim
  autocmd!
  autocmd FileType python nunmap <buffer> K
    autocmd FileType python nunmap <buffer> <leader>s
augroup END

" Remap Shift k to <leader>shift k
nnoremap <silent> <leader>K :call jedi#show_documentation()<CR>

" Remap "Go to Definition" to <leader>d and free up <leader>g
nnoremap <silent> <leader>d :call jedi#goto()<CR>

" --- fzf key bindings

" Use ripgrep (rg) with fzf
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  let fzf_command_prefix = 'Rg'
endif

" Function to call git grep for searching in a git repo
command! -nargs=+ GitGrep call fzf#vim#grep(
\ 'git grep --line-number --column -I '.shellescape(<q-args>),
\ 1,
\ fzf#vim#with_preview(),
\ 0)

" Prompt the user for a git grep pattern and execute GitGrep with it
function! s:GitGrepSearch()
  let l:pattern = input('Git grep pattern: ')
  if empty(l:pattern)
    " If the user presses Enter without providing a pattern, just return
    return
  endif
  " Execute GitGrep with the provided pattern
  execute 'GitGrep ' . l:pattern
endfunction

" Map this to <leader>a
autocmd FileType python silent! nunmap <buffer> <leader>g
nnoremap <silent> <leader>g :call <SID>GitGrepSearch()<CR>

" Function to save the current buffer before performing an action
function! s:SaveAndExecute(cmd)
  if &modified
    write
  endif
  execute a:cmd
endfunction

" Enable autosaving
" set autowriteall

" Fuzzy find files and open in new buffers: \f
nnoremap <silent> <leader>f :call <SID>SaveAndExecute('RgFiles')<CR>

" Key bindings for buffer navigation

" Next buffer
nnoremap <silent> <leader>Bn :call <SID>SaveAndExecute('bnext')<CR>
" Previous buffer
nnoremap <silent> <leader>Bp :call <SID>SaveAndExecute('bprevious')<CR>
" Close current buffer
nnoremap <silent> <leader>Bc :call <SID>SaveAndExecute('bd')<CR>

" list buffers
noremap <silent> <leader>ls :ls<CR>

" Custom key binding to open buffer list popup
" IMPORTANT: if more shortcut starts with the same key binding vim waits
"   this slows down the popup window. Hence I set the other commands to
"   start with B instead of b
nnoremap <silent> <leader>b :call <SID>SaveAndExecute(':RgBuffers')<CR>

" set file in-line search wit <leader>s (no collision of commands, see above)
nnoremap <silent> <leader>s :call <SID>SaveAndExecute(':RgLines')<CR>

" Set markdown-preview commands
nmap <silent> <leader>M  <Plug>MarkdownPreview<CR>

" Use English as default
language en_US.utf-8

" Enable spell checking for .tex files
autocmd FileType tex setlocal spell spelllang=en
let g:tex_comment_nospell = 0  " Ensure comments are spell-checked
autocmd FileType tex syntax spell toplevel  " Apply spell checking globally

set spelllang=en
" Enable default spell checking
set spell

" Function to toggle spell checking languages between en and hu and map it to
" F5
function! ToggleSpellLang()
  if &spelllang == "en"
    set spelllang=hu
    echo "Spell checking language set to Hungarian (hu)"
  else
    set spelllang=en
    echo "Spell checking language set to English (en)"
  endif
endfunction

nnoremap <F5> :call ToggleSpellLang()<CR>

" map spell checking on-off toggle to F6
inoremap <F6> <C-O>:set spell!<CR>
nnoremap <F6> :set spell!<CR>

" Function to toggle filetype and map it into F7
function! ToggleFiletype()
  if exists("b:original_filetype") && &filetype == "plaintext"
    " Restore the original filetype
    let &filetype = b:original_filetype
    unlet b:original_filetype
    echo "Filetype restored to " . &filetype
  else
    " Save the current filetype and set to plaintext
    let b:original_filetype = &filetype
    set filetype=plaintext
    echo "Filetype set to plaintext"
  endif
endfunction

nnoremap <F7> :call ToggleFiletype()<CR>

" Set colorscheme
set bg=dark
colorscheme gruvbox

" Old color scheme - Adjusted to a built-in scheme that might feel closer to GitHub/Sublime
" See the plugs for the color schema I am using
" colorscheme sublimemonokai

" Enable Airline and set Gruvbox theme
" let airline_theme='gruvbox'
" let airline_powerline_fonts = 1

" Highlight only misspelled words
highlight SpellBad cterm=underline
highlight SpellCap cterm=underline
highlight SpellRare cterm=underline
highlight SpellLocal cterm=underline

" Syntax and numbering
syntax on " Syntax highlight
set number " Line numbers
" set number relativenumber " Set relative line numbers

" Load custom Base16 Atelier Lakeside Dark color scheme
" colorscheme base16-atelier-lakeside-dark

" Fonts gor the GUI
set guifont=Monospace\ 10

" Cursor highlights
set cursorline " Highlight cursor line
"set cursorcolumn " Highlight cursor column
hi clear CursorLine " Unset cursorline formatting
hi link CursorLine CursorColumn " Set formatting same as cursorcolumn

" Set vertical line
set colorcolumn=79

" STATUS LINE ------------------------------------------------------------ {{{
" Clear status line when vimrc is reloaded.
set statusline=

" Status line left side:
"    %F: current file full path
"    %M: + if file is modified and unchanged
"    %Y: type of the file
"    %R: displays flag if read-only
set statusline+=\ %F\ %M\ %Y\ %R

" Use a divider to separate the left side from the right side.
set statusline+=%=

" Status line right side. Self explanatory code.
set statusline+=\ row:\ %l\ col:\ %c\ percent:\ %p%%

" Show the status on the second to last line.
set laststatus=2

" }}}

" Tab behaviour
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set shiftwidth=4    " number of spaces to use for autoindent
set expandtab       " expand tab to spaces so that tabs are spaces

" History
set history=200

" Set matching pairs of characters and highlight matching brackets
set matchpairs+=<:>,「:」

" Ignore case in general, but become case-sensitive when uppercase is present
set ignorecase smartcase

" Use mouse to select and resize windows, etc.
" if has('mouse')
"    set mouse=nic  " Enable mouse in several mode
"    set mousemodel=popup  " Set the behaviour of mouse
" endif

" Fileformats to use for new files
set fileformats=unix,dos


" Minimum lines to keep above and below cursor when scrolling
set scrolloff=3

" --- Unable wrap
" Set wrap
" set wrap
" Set maximum width for wrap
" set textwidth=90

" Disable automatic line breaking
set textwidth=0

" Remove automatic text wrapping
set formatoptions-=t




